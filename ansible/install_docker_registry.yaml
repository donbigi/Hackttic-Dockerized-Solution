---
- name: Setup Docker Registry
  hosts: remote
  become: yes
  gather_facts: no
  tasks:
    - name: Create certificate storage folders
      file:
        path: /home/$USER/test/certs
        state: directory

    - name: Copy certificates
      ansible.builtin.copy:
        src: "/Users/$USER/CERT_DIR/"
        dest: "/home/$USER/test/certs/"

    - name: Create Docker cert directory
      file:
        path: /etc/docker/certs.d/$DOMAIN_NAME:443
        state: directory

    - name: Copy SSL certificates
      ansible.builtin.copy:
        src: /home/$USER/test/certs/
        dest: /etc/docker/certs.d/$DOMAIN_NAME:443/
        remote_src: yes

    - name: Restart Docker
      systemd:
        name: docker
        state: restarted
    
    - name: Create Authentication folder
      file:
        path: /home/$USER/test/auth
        state: directory
    - name: Install jq
      apt:
        name: jq
        state: present
      become: yes

    - name: Export ACCESS_TOKEN
      ansible.builtin.set_fact:
        key: ACCESS_TOKEN
        value: $TOKEN

    - name: Create retrieve_json.sh script
      copy:
        content: |
          #!/bin/bash

          # Define the URL to fetch the JSON from
          URL="https://hackattic.com/challenges/dockerized_solutions/problem?access_token=$TOKEN"

          # Use curl to fetch the JSON data and store it in a variable
          JSON=$(curl -s "$URL")

          # Parse the JSON data using a tool like jq and extract the variables
          USER=$(echo "$JSON" | jq -r '.credentials.user')
          PASSWORD=$(echo "$JSON" | jq -r '.credentials.password')
          IGNITION_KEY=$(echo "$JSON" | jq -r '.ignition_key')
          TOKEN=$(echo "$JSON" | jq -r '.trigger_token')

          # Print the export commands
          echo "export USERNAME='$USER'"
          echo "export PASSWORD='$PASSWORD'"
          echo "export IGNITION_KEY='$IGNITION_KEY'"
          echo "export TOKEN='$TOKEN'"
        dest: /home/$USER/retrieve_json.sh
        mode: '0755'

    - name: Execute script and capture output
      command: /home/$USER/retrieve_json.sh
      register: script_output

    - name: Save script output to a file
      copy:
        content: "{{ script_output.stdout }}"
        dest: /home/$USER/hackattic_exports.sh
        mode: '0755'

    - name: Set Ansible variables
      set_fact:
        USERNAME: "{{ script_output.stdout_lines[0].split('=')[1] }}"
        PASSWORD: "{{ script_output.stdout_lines[1].split('=')[1] }}"
        IGNITION_KEY: "{{ script_output.stdout_lines[2].split('=')[1] }}"
        TOKEN: "{{ script_output.stdout_lines[3].split('=')[1] }}"
      when: script_output.rc == 0  # Only set variables if the script ran successfully

    - name: Install Apache package (including htpasswd)
      apt:
        name: apache2-utils  # This might vary based on your OS
        state: present
      become: yes

    - name: Generate htpasswd file
      command: "htpasswd -Bbn {{ USERNAME }} {{ PASSWORD }}"
      register: htpasswd_output
      changed_when: false

    - name: Save htpasswd file
      copy:
        content: "{{ htpasswd_output.stdout }}"
        dest: /home/$USER/test/auth/htpasswd
        mode: '0644'

    - name: Start Docker Registry Container
      docker_container:
        name: local-registry
        image: registry:2
        state: started
        restart_policy: always
        published_ports:
          - "443:443"
        volumes:
          - /home/$USER/test/certs:/certs
          - /home/$USER/test/auth:/auth
        env:
          REGISTRY_AUTH: htpasswd
          REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm
          REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd
          REGISTRY_HTTP_ADDR: 0.0.0.0:443
          REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.cert
          REGISTRY_HTTP_TLS_KEY: /certs/domain.key
